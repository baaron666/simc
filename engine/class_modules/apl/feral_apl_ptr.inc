action_priority_list_t* precombat = get_action_priority_list( "precombat" );
action_priority_list_t* def = get_action_priority_list( "default" );
action_priority_list_t* aoe_builder = get_action_priority_list( "aoe_builder" );
action_priority_list_t* builder = get_action_priority_list( "builder" );
action_priority_list_t* cooldown = get_action_priority_list( "cooldown" );
action_priority_list_t* finisher = get_action_priority_list( "finisher" );
action_priority_list_t* variable = get_action_priority_list( "variable" );

precombat->add_action( "cat_form,if=!buff.cat_form.up" );
precombat->add_action( "heart_of_the_wild" );
precombat->add_action( "use_item,name=imperfect_ascendancy_serum" );
precombat->add_action( "use_item,name=treacherous_transmitter" );
precombat->add_action( "prowl,if=!buff.prowl.up" );

def->add_action( "prowl,if=buff.bs_inc.down&!buff.prowl.up" );
def->add_action( "cat_form,if=!buff.cat_form.up&!talent.fluid_form" );
def->add_action( "invoke_external_buff,name=power_infusion,if=buff.bs_inc.up|!talent.berserk_heart_of_the_lion","Line up <a href='https://www.wowhead.com/spell=10060/power-infusion'>Power Infusion</a> with Berserk." );
def->add_action( "call_action_list,name=variable" );
def->add_action( "auto_attack,if=!buff.prowl.up|!buff.shadowmeld.up" );
def->add_action( "tigers_fury,if=(energy.deficit>35|combo_points=5|combo_points>=3&dot.rip.refreshable&buff.bloodtalons.up)&(fight_remains<=15|(cooldown.bs_inc.remains>20&target.time_to_die>5)|(cooldown.bs_inc.ready&target.time_to_die>12|target.time_to_die=fight_remains))" );
def->add_action( "rake,target_if=max:refreshable+(persistent_multiplier>dot.rake.pmultiplier),if=buff.shadowmeld.up|buff.prowl.up" );
def->add_action( "natures_vigil,if=spell_targets.swipe_cat>0&variable.regrowth" );
def->add_action( "renewal,if=spell_targets.swipe_cat>0&variable.regrowth" );
def->add_action( "adaptive_swarm,target_if=dot.adaptive_swarm_damage.stack<3&(!dot.adaptive_swarm_damage.ticking|dot.adaptive_swarm_damage.remains<2),if=!action.adaptive_swarm_damage.in_flight&(spell_targets=1|!talent.unbridled_swarm)&(dot.rip.ticking|hero_tree.druid_of_the_claw)" );
def->add_action( "adaptive_swarm,target_if=max:(1+dot.adaptive_swarm_damage.stack)*dot.adaptive_swarm_damage.stack<3*time_to_die,if=buff.cat_form.up&dot.adaptive_swarm_damage.stack<3&talent.unbridled_swarm.enabled&spell_targets.swipe_cat>1&dot.rip.ticking" );
def->add_action( "ferocious_bite,if=buff.apex_predators_craving.up&!(variable.need_bt&active_bt_triggers=2)" );
def->add_action( "call_action_list,name=cooldown,if=dot.rip.ticking" );
def->add_action( "rip,line_cd=7,if=hero_tree.wildstalker&!talent.veinripper&buff.tigers_fury.up&buff.bloodtalons.up&(combo_points>=3&cooldown.tigers_fury.remains>25|buff.tigers_fury.remains<3&variable.rip_duration>cooldown.tigers_fury.remains&cooldown.tigers_fury.remains>dot.rip.remains)","TODO: TEST MORE BUILDS LOL" );
def->add_action( "call_action_list,name=builder,if=buff.bs_inc.up&!buff.ravage.up&!buff.coiled_to_spring.up&hero_tree.druid_of_the_claw&talent.coiled_to_spring&spell_targets<=2" );
def->add_action( "wait,sec=action.tigers_fury.ready,if=combo_points=5&cooldown.tigers_fury.remains<3&spell_targets=1" );
def->add_action( "call_action_list,name=finisher,if=combo_points=5" );
def->add_action( "call_action_list,name=builder,if=spell_targets.swipe_cat=1&combo_points<5&(variable.time_to_pool<=0|!variable.need_bt|variable.proccing_bt)" );
def->add_action( "call_action_list,name=aoe_builder,if=spell_targets.swipe_cat>=2&combo_points<5&(variable.time_to_pool<=0|!variable.need_bt|variable.proccing_bt)" );
def->add_action( "regrowth,if=buff.predatory_swiftness.up&variable.regrowth" );

aoe_builder->add_action( "variable,name=proccing_bt,op=set,value=variable.need_bt" );
aoe_builder->add_action( "thrash_cat,if=refreshable&!talent.thrashing_claws&!(variable.need_bt&buff.bt_thrash.up)","maintain thrash highest prio" );
aoe_builder->add_action( "brutal_slash,target_if=min:time_to_die,if=(cooldown.brutal_slash.full_recharge_time<4|time_to_die<4|raid_event.adds.remains<4|(buff.bs_inc.up&spell_targets>=3-hero_tree.druid_of_the_claw))&!(variable.need_bt&buff.bt_swipe.up&(buff.bs_inc.down|spell_targets<3-hero_tree.druid_of_the_claw))","avoid capping brs charges. Also send brutal slashes/ws swipe in aoe, even if we need to proc bloodtalons, during berserk." );
aoe_builder->add_action( "swipe_cat,target_if=min:time_to_die,if=talent.wild_slashes&(time_to_die<4|raid_event.adds.remains<4|buff.bs_inc.up&spell_targets>=3-hero_tree.druid_of_the_claw)&!(variable.need_bt&buff.bt_swipe.up&(buff.bs_inc.down|spell_targets<3-hero_tree.druid_of_the_claw))" );
aoe_builder->add_action( "swipe_cat,if=time_to_die<4|(talent.wild_slashes&spell_targets.swipe_cat>4&!(variable.need_bt&buff.bt_swipe.up))","with wild slashes we swipe at 5+ targets over raking/moonfire" );
aoe_builder->add_action( "prowl,target_if=dot.rake.refreshable|dot.rake.pmultiplier<1.4,if=!(variable.need_bt&buff.bt_rake.up)&action.rake.ready&gcd.remains=0&!buff.sudden_ambush.up&!variable.cc_capped" );
aoe_builder->add_action( "shadowmeld,target_if=dot.rake.refreshable|dot.rake.pmultiplier<1.4,if=!(variable.need_bt&buff.bt_rake.up)&action.rake.ready&!buff.sudden_ambush.up&!buff.prowl.up&!variable.cc_capped" );
aoe_builder->add_action( "rake,target_if=refreshable,if=talent.doubleclawed_rake&!(variable.need_bt&buff.bt_rake.up)&!variable.cc_capped","dcr rake > moonfire" );
aoe_builder->add_action( "swipe_cat,if=talent.wild_slashes&spell_targets.swipe_cat>2&!(variable.need_bt&buff.bt_swipe.up)","at 3t with wild slashes, swipe is better than moonfiring/st rake" );
aoe_builder->add_action( "moonfire_cat,target_if=refreshable,if=!(variable.need_bt&buff.bt_moonfire.up)&!variable.cc_capped","li moonfire is better than non-dcr rake in aoe" );
aoe_builder->add_action( "rake,target_if=refreshable,if=!(variable.need_bt&buff.bt_rake.up)&!variable.cc_capped" );
aoe_builder->add_action( "brutal_slash,if=!(variable.need_bt&buff.bt_swipe.up)","fillers" );
aoe_builder->add_action( "swipe_cat,if=!(variable.need_bt&buff.bt_swipe.up)" );
aoe_builder->add_action( "shred,if=!buff.sudden_ambush.up&!variable.easy_swipe&!(variable.need_bt&buff.bt_shred.up)" );
aoe_builder->add_action( "thrash_cat,if=!talent.thrashing_claws&!(variable.need_bt&buff.bt_thrash.up)" );
aoe_builder->add_action( "rake,target_if=max:ticks_gained_on_refresh,if=talent.doubleclawed_rake&buff.sudden_ambush.up&variable.need_bt&buff.bt_rake.down","fallback bt actions" );
aoe_builder->add_action( "moonfire_cat,target_if=max:ticks_gained_on_refresh,if=variable.need_bt&buff.bt_moonfire.down" );
aoe_builder->add_action( "rake,target_if=max:ticks_gained_on_refresh,if=buff.sudden_ambush.up&variable.need_bt&buff.bt_rake.down" );
aoe_builder->add_action( "shred,if=variable.need_bt&buff.bt_shred.down&!variable.easy_swipe" );
aoe_builder->add_action( "rake,target_if=dot.rake.pmultiplier<1.6,if=variable.need_bt&buff.bt_rake.down" );
aoe_builder->add_action( "thrash_cat,if=variable.need_bt&buff.bt_shred.down" );

builder->add_action( "variable,name=proccing_bt,op=set,value=variable.need_bt","this variable tracks whether or not we've started our bt sequence" );
builder->add_action( "prowl,if=gcd.remains=0&energy>=35&!buff.sudden_ambush.up&(dot.rake.refreshable|dot.rake.pmultiplier<1.4)&!(variable.need_bt&buff.bt_rake.up)&buff.tigers_fury.up&!buff.shadowmeld.up" );
builder->add_action( "shadowmeld,if=gcd.remains=0&energy>=35&!buff.sudden_ambush.up&(dot.rake.refreshable|dot.rake.pmultiplier<1.4)&!(variable.need_bt&buff.bt_rake.up)&buff.tigers_fury.up&!buff.prowl.up" );
builder->add_action( "rake,if=((refreshable&persistent_multiplier>=dot.rake.pmultiplier|dot.rake.remains<3.5)|buff.sudden_ambush.up&persistent_multiplier>dot.rake.pmultiplier)&!(variable.need_bt&buff.bt_rake.up)&(hero_tree.wildstalker|!buff.bs_inc.up)","upgrade to stealth rakes, otherwise refresh in pandemic. Delay rake as long as possible if it would downgrade" );
builder->add_action( "shred,if=buff.sudden_ambush.up&buff.bs_inc.up" );
builder->add_action( "brutal_slash,if=cooldown.brutal_slash.full_recharge_time<4&!(variable.need_bt&buff.bt_swipe.up)" );
builder->add_action( "moonfire_cat,if=refreshable" );
builder->add_action( "thrash_cat,if=!buff.bs_inc.up&refreshable&!talent.thrashing_claws" );
builder->add_action( "shred,if=buff.clearcasting.react&!(variable.need_bt&buff.bt_shred.up)" );
builder->add_action( "pool_resource,wait=0.2,if=variable.dot_refresh_soon&energy.deficit>70&!variable.need_bt&!buff.bs_inc.up&cooldown.tigers_fury.remains>3","pool energy if we need to refresh dot in the next 1.5s" );
builder->add_action( "brutal_slash,if=!(variable.need_bt&buff.bt_swipe.up)" );
builder->add_action( "shred,if=!(variable.need_bt&buff.bt_shred.up)" );
builder->add_action( "thrash_cat,if=refreshable&!talent.thrashing_claws" );
builder->add_action( "swipe_cat,if=variable.need_bt&buff.bt_swipe.down" );
builder->add_action( "rake,if=variable.need_bt&buff.bt_rake.down&persistent_multiplier>=dot.rake.pmultiplier","clip rake for bt if it wont downgrade its snapshot" );
builder->add_action( "moonfire_cat,if=variable.need_bt&buff.bt_moonfire.down" );
builder->add_action( "thrash_cat,if=variable.need_bt&buff.bt_thrash.down" );

cooldown->add_action( "use_item,slot=trinket1,if=trinket.1.has_use_damage&(trinket.2.cooldown.remains>20|!trinket.2.has_use_buff|cooldown.tigers_fury.remains<25&cooldown.tigers_fury.remains>20)","non-stat on use trinkets get used on cooldown, so long as it wont interfere with a stat on-use trinket" );
cooldown->add_action( "use_item,slot=trinket2,if=(trinket.2.has_use_damage|trinket.2.is.mister_lockandstalk)&(trinket.1.cooldown.remains>20|!trinket.1.has_use_buff|cooldown.tigers_fury.remains<25&cooldown.tigers_fury.remains>20)" );
cooldown->add_action( "incarnation,if=buff.tigers_fury.up&!variable.holdBerserk" );
cooldown->add_action( "berserk,if=buff.tigers_fury.up&!variable.holdBerserk" );
cooldown->add_action( "berserking,if=buff.bs_inc.up" );
cooldown->add_action( "potion,if=buff.bs_inc.up|fight_remains<32|buff.tigers_fury.up&!variable.holdPot","potion during berserk, fallback pot if the fight is going to end within its duration. Expedite use if you would lose a pot use by holding it." );
cooldown->add_action( "use_items","non trinket gear-on-uses have variable rules on whether or not they trigger the trinket shared CD. For the cases they do we will need specific APL entries. For now just use on cooldown." );
cooldown->add_action( "use_item,slot=main_hand,if=(trinket.2.cooldown.remains>20|!trinket.2.has_cooldown)&(trinket.1.cooldown.remains>20|!trinket.1.has_cooldown)&buff.tigers_fury.up" );
cooldown->add_action( "use_item,slot=trinket1,use_off_gcd=1,if=(time>10|buff.bs_inc.up)&trinket.1.has_use_buff&(cooldown.tigers_fury.remains>=25|(trinket.1.is.treacherous_transmitter|trinket.1.is.imperfect_ascendancy_serum)&cooldown.tigers_fury.remains<2)&(buff.potion.up|variable.slot1CountRemaining!=variable.potCountRemaining)&(cooldown.bs_inc.remains<5&!variable.holdBerserk|cooldown.convoke_the_spirits.remains<10&!variable.holdConvoke|variable.lowestCDremaining>trinket.1.cooldown.duration|variable.zerkCountRemaining=1&variable.convokeCountRemaining=1&variable.potCountRemaining=1&(variable.highestCDremaining+3)>trinket.1.cooldown.duration|variable.zerkCountRemaining=variable.convokeCountRemaining&variable.zerkCountRemaining!=variable.potCountRemaining&(cooldown.bs_inc.remains<?cooldown.convoke_the_spirits.remains)>trinket.1.cooldown.duration|variable.slot1CountRemaining=variable.potCountRemaining-1&buff.potion.up|trinket.2.has_use_buff&(variable.secondLowestCDremaining>trinket.1.cooldown.duration&variable.lowestCDremaining>trinket.2.cooldown.remains|variable.zerkCountRemaining=1&variable.convokeCountRemaining=1&variable.potCountRemaining=1&variable.highestCDremaining>trinket.2.cooldown.remains|variable.zerkCountRemaining=variable.convokeCountRemaining&variable.zerkCountRemaining!=variable.potCountRemaining&(cooldown.convoke_the_spirits.remains<?cooldown.bs_inc.remains)>trinket.2.cooldown.remains))","stat on-use trinkets, essentially this compares the number of trinket uses to the number of other cooldown uses remaining in the fight to determine whether or not to send the trinket." );
cooldown->add_action( "use_item,slot=trinket2,use_off_gcd=1,if=(time>10|buff.bs_inc.up)&trinket.2.has_use_buff&(cooldown.tigers_fury.remains>=25|(trinket.2.is.treacherous_transmitter|trinket.2.is.imperfect_ascendancy_serum)&cooldown.tigers_fury.remains<2)&(buff.potion.up|variable.slot2CountRemaining!=variable.potCountRemaining)&(cooldown.bs_inc.remains<5&!variable.holdBerserk|cooldown.convoke_the_spirits.remains<10&!variable.holdConvoke|variable.lowestCDremaining>trinket.2.cooldown.duration|variable.zerkCountRemaining=1&variable.convokeCountRemaining=1&variable.potCountRemaining=1&(variable.highestCDremaining+3)>trinket.2.cooldown.duration|variable.zerkCountRemaining=variable.convokeCountRemaining&variable.zerkCountRemaining!=variable.potCountRemaining&(cooldown.bs_inc.remains<?cooldown.convoke_the_spirits.remains)>trinket.2.cooldown.duration|variable.slot1CountRemaining=variable.potCountRemaining-1&buff.potion.up|trinket.1.has_use_buff&(variable.secondLowestCDremaining>trinket.2.cooldown.duration&variable.lowestCDremaining>trinket.1.cooldown.remains|variable.zerkCountRemaining=1&variable.convokeCountRemaining=1&variable.potCountRemaining=1&variable.highestCDremaining>trinket.1.cooldown.remains|variable.zerkCountRemaining=variable.convokeCountRemaining&variable.zerkCountRemaining!=variable.potCountRemaining&(cooldown.convoke_the_spirits.remains<?cooldown.bs_inc.remains)>trinket.1.cooldown.remains))" );
cooldown->add_action( "use_item,slot=trinket1,if=fight_remains<=20","fallback use if fight is ending soon" );
cooldown->add_action( "use_item,slot=trinket2,if=fight_remains<=20" );
cooldown->add_action( "do_treacherous_transmitter_task,if=buff.tigers_fury.up|fight_remains<22" );
cooldown->add_action( "feral_frenzy,if=(buff.tigers_fury.up|!talent.savage_fury|!hero_tree.wildstalker|fight_remains<cooldown.tigers_fury.remains)&combo_points<=1+buff.bs_inc.up" );
cooldown->add_action( "convoke_the_spirits,if=fight_remains<5|buff.bs_inc.up&buff.bs_inc.remains<5-talent.ashamanes_guidance|buff.tigers_fury.up&!variable.holdConvoke&(combo_points<=4|buff.bs_inc.up&combo_points<=3)","always line up convoke with berserk if you can" );

finisher->add_action( "primal_wrath,target_if=max:dot.bloodseeker_vines.ticking,if=spell_targets.primal_wrath>1&((dot.primal_wrath.remains<6.5&!buff.bs_inc.up|dot.primal_wrath.refreshable)|(!talent.rampant_ferocity.enabled&(spell_targets.primal_wrath>1&!dot.bloodseeker_vines.ticking&!buff.ravage.up|spell_targets.primal_wrath>6+talent.ravage)))","maintain/upgrade pws, if we have 6.5+s left on pw, we will instead bite if we have rampant ferocity talented. Without rampant, we will bite a vined target with 6 or fewer targets. If we have Ravage, we use specifically Ravage at 7 or fewer targets." );
finisher->add_action( "rip,target_if=refreshable,if=(!talent.primal_wrath|spell_targets=1)&(buff.bloodtalons.up|!talent.bloodtalons)&(buff.tigers_fury.up|dot.rip.remains<cooldown.tigers_fury.remains)&(remains<fight_remains|remains<4&buff.ravage.up)","rip if single target or pw isnt up. Rip with bloodtalons if talented. If tigers fury will be up before rip falls off, then delay refresh" );
finisher->add_action( "pool_resource,for_next=1" );
finisher->add_action( "ferocious_bite,max_energy=1,target_if=max:dot.bloodseeker_vines.ticking,if=!buff.bs_inc.up" );
finisher->add_action( "ferocious_bite,target_if=max:dot.bloodseeker_vines.ticking" );

variable->add_action( "variable,name=convokeCountRemaining,value=floor(((fight_remains-variable.convoke_cd)%cooldown.convoke_the_spirits.duration)+(fight_remains>cooldown.convoke_the_spirits.remains))","TODO: if im feeling real bold, add berserking to this list (same as berserk logic, but its always a 3min cd)" );
variable->add_action( "variable,name=zerkCountRemaining,value=floor(((fight_remains-variable.bs_inc_cd)%cooldown.bs_inc.duration)+(fight_remains>cooldown.bs_inc.remains))","+fight_remains>cooldown.convoke_the_spirits.remains" );
variable->add_action( "variable,name=potCountRemaining,value=floor(((fight_remains-variable.pot_cd)%cooldown.potion.duration)+(fight_remains>cooldown.potion.remains))" );
variable->add_action( "variable,name=slot1CountRemaining,value=floor(((fight_remains-trinket.1.cooldown.remains-10)%trinket.1.cooldown.duration)+(fight_remains>trinket.1.cooldown.remains))" );
variable->add_action( "variable,name=slot2CountRemaining,value=floor(((fight_remains-trinket.2.cooldown.remains-10)%trinket.2.cooldown.duration)+(fight_remains>trinket.2.cooldown.remains))" );
variable->add_action( "variable,name=firstHoldBerserkCondition,value=variable.zerkCountRemaining=1&(variable.convokeCountRemaining=1&cooldown.convoke_the_spirits.remains>10|variable.potCountRemaining=1&cooldown.potion.remains)","hold berserk if there is 1 convoke or 1 potion remaining in the fight but they aren't available yet" );
variable->add_action( "variable,name=secondHoldBerserkCondition,value=cooldown.convoke_the_spirits.remains>20&variable.convokeCountRemaining=variable.zerkCountRemaining&variable.zerkCountRemaining=floor(((fight_remains-variable.convoke_cd)%cooldown.bs_inc.duration)+(fight_remains>cooldown.convoke_the_spirits.remains))","hold berserk if there are as many zerk casts as convoke casts remaining and holding zerk for convoke does not lose you a cast" );
variable->add_action( "variable,name=holdBerserk,value=variable.firstHoldBerserkCondition|variable.secondHoldBerserkCondition" );
variable->add_action( "variable,name=holdConvoke,value=variable.convokeCountRemaining=1&variable.zerkCountRemaining=1&!buff.bs_inc.up","hold the last convoke if there is another berserk cast remaining and Berserk isn't already up" );
variable->add_action( "variable,name=holdPot,value=variable.potCountRemaining=floor(((fight_remains-variable.bs_inc_cd)%cooldown.potion.duration)+(fight_remains>cooldown.bs_inc.remains))","hold potion for berserk if doing so does not lose you a cast" );
variable->add_action( "variable,name=bs_inc_cd,value=cooldown.bs_inc.remains+10" );
variable->add_action( "variable,name=convoke_cd,value=cooldown.convoke_the_spirits.remains+10" );
variable->add_action( "variable,name=pot_cd,value=cooldown.potion.remains+25" );
variable->add_action( "variable,name=highestCDremaining,value=cooldown.convoke_the_spirits.remains<?cooldown.bs_inc.remains<?cooldown.potion.remains" );
variable->add_action( "variable,name=lowestCDremaining,value=cooldown.convoke_the_spirits.remains>?cooldown.bs_inc.remains>?cooldown.potion.remains" );
variable->add_action( "variable,name=secondLowestCDremaining,op=setif,condition=cooldown.convoke_the_spirits.remains>cooldown.bs_inc.remains,value=cooldown.convoke_the_spirits.remains>?cooldown.potion.remains,value_else=cooldown.bs_inc.remains>?cooldown.potion.remains" );
variable->add_action( "variable,name=rip_duration,value=((4+(4*combo_points))*(1-(0.2*talent.circle_of_life_and_death))*(1+(0.25*talent.veinripper)))+(variable.rip_max_pandemic_duration>?dot.rip.remains)","what rips new duration would be if applied in current state" );
variable->add_action( "variable,name=rip_max_pandemic_duration,value=((4+(4*combo_points))*(1-(0.2*talent.circle_of_life_and_death))*(1+(0.25*talent.veinripper)))*0.3" );
variable->add_action( "variable,name=effective_energy,op=set,value=energy+(40*buff.clearcasting.stack)+(3*energy.regen)+(50*(cooldown.tigers_fury.remains<3.5))","most expensive bt cycle is Shred + Thrash + Rake, 40+40+35 for 115 energy. During incarn it is 32+32+28 for 92energy" );
variable->add_action( "variable,name=time_to_pool,op=set,value=((115-variable.effective_energy-(23*buff.incarnation.up))%energy.regen)","estimated time until we have enough energy to proc bloodtalons." );
variable->add_action( "variable,name=dot_refresh_soon,value=(!talent.thrashing_claws&(dot.thrash_cat.remains-dot.thrash_cat.duration*0.3<=2))|(talent.lunar_inspiration&(dot.moonfire_cat.remains-dot.moonfire_cat.duration*0.3<=2))|((dot.rake.pmultiplier<1.6|buff.sudden_ambush.up)&(dot.rake.remains-dot.rake.duration*0.3<=2))","this returns true if we have a dot nearing pandemic range" );
variable->add_action( "variable,name=need_bt,value=talent.bloodtalons&buff.bloodtalons.stack<=1","try to proc bt if we have 1 or 0 stacks of bloodtalons" );
variable->add_action( "variable,name=cc_capped,value=buff.clearcasting.stack=(1+talent.moment_of_clarity)","capped on clearcasting stacks" );
variable->add_action( "variable,name=regrowth,op=reset","optional variable that sends regrowth and renewal casts. Turned off by default" );
variable->add_action( "variable,name=easy_swipe,op=reset","optional variable that forgoes shredding in AoE. Turned off by default" );
